#!/usr/bin/env bash
# This script allows changing the icon of a folder
#
# @author: Junior Martins (https://github.com/jrom99)
# @license: MIT license (MIT)
# @link: https://github.com/jrom99/set-folder-icon


if test -z "$BASH_VERSION"; then
	printf "Error: this script only works in bash.\n" >&2
	exit 1
fi

if (( BASH_VERSINFO[0] * 10 + BASH_VERSINFO[1] < 40 )); then
	printf "Error: this script requires bash version >= 4.0\n" >&2
	exit 1
fi

# set -x  # Uncomment to debug this shell script
set -o errexit \
	-o noclobber \
	-o pipefail

PROGNAME="$(basename "${BASH_SOURCE[0]}")"
PROGVERSION="0.1.2"

readonly PROGNAME
readonly PROGVERSION
readonly -a ARGS=("$@")


msg() {
	printf "%s: %b\n" "$PROGNAME" "$*"
}

err() {
	msg "Error:" "$*" >&2
}

verbose() {
	[ -t 4 ] || return 0
	msg "$@" >&4
}

fatal() {
	err "$*"
	exit 1
}

usage() {
			cat <<- EOF
			USAGE
			  $ $PROGNAME [-d] FOLDER [-t] TYPE
			  $ $PROGNAME --delete-icon FOLDER
			  $ $PROGNAME --get-icon FOLDER
			  $ $PROGNAME --list

			OPTIONS
			  -t --type TYPE              folder icon type
			  -d --dir  FOLDER            directory path
			  --del --delete-icon FOLDER  remove custom icon
			  -f --force                  ignore type validity check
			  -g --get --get-icon FOLDER  show icons
			  -l --list                   show available types
			  -V --version                print $PROGNAME version and exit
			  -h --help                   show this help
			EOF

			exit "${1:-0}"
}

_is_valid_type() {
	local dir_type="$1"

	for i in "${types[@]}"; do
		[ "$i" == "$dir_type" ] || continue
		return 0
	done

	return 1
}

get_types() {
	# based on Papyrus icons types
	local -a duptypes=()
	local -a valid_types=("activities" "android" "apple" "applications"
		"arduino" "backup" "books" "cd" "code" "copy-cloud" "desktop"
		"development" "documents-open" "documents" "download-open" "download"
		"downloads" "drag-accept" "dropbox" "favorites" "games" "git" "github"
		"gitlab" "gnome" "google-drive" "image-people" "important" "java"
		"kde" "linux" "locked" "mail-cloud" "mail" "mega" "meocloud"
		"music-open" "music" "network" "nextcloud" "onedrive" "open"
		"owncloud" "pcloud" "photo" "pictures-open" "pictures" "print"
		"private" "projects" "public" "publicshare-open" "recent"
		"remove-open" "remote" "script" "snap" "steam" "sync" "syncthing"
		"tar" "templates-open" "templates" "torrent" "unlocked" "vbox"
		"video" "videos-open" "videos" "visiting" "vmware" "wifi"
		"wine" "yandex-disk")

	for theme_dir in "${THEME_DIRS[@]}"; do
		for dir_type in "${valid_types[@]}"; do
			prefix="$theme_dir/48x48/places/folder-$dir_type"
			if [[ -e "$prefix.svg" || -e "$prefix.png" ]]; then
				duptypes+=( "$dir_type" )
			fi
		done
	done

	# remove duplicates
	while IFS= read -r -d '' item;	do
		types+=("$item")
	done < <(printf "%s\0" "${duptypes[@]}" | sort -uz)

	verbose "Found types ${types[*]}"
}

get_theme_dirs() {
	declare -A THEME_DIRS_DICT
	local -a themes_order=()
	local -a data_dirs=()
	local -a icons_dirs=(
		"$HOME/.icons"
		"${XDG_DATA_HOME:-$HOME/.local/share}/icons"
	)

	# Get data directories from XDG_DATA_DIRS variable and
	# convert colon-separated list into bash array
	IFS=: read -ra data_dirs <<< "${XDG_DATA_DIRS:-/usr/local/share:/usr/share}"

	for data_dir in "${data_dirs[@]}"; do
		[[ -d "$data_dir/icons" ]] || continue
		icons_dirs=( "${icons_dirs[@]}" "${data_dir%/}/icons" )
	done

	# removes trailing quotes
	THEME_NAME="$(gsettings get org.gnome.desktop.interface icon-theme)"
	THEME_NAME="${THEME_NAME//\'/}"

	# set first theme dir
	for icon_dir in "${icons_dirs[@]}"; do
		theme_dir="$icon_dir/$THEME_NAME"
		if [[ -d "$theme_dir" && -f "$theme_dir/index.theme" ]]; then
			THEME_DIRS_DICT[$THEME_NAME]="$theme_dir"
		fi
	done

	[[ ! -d "${THEME_DIRS_DICT[$THEME_NAME]}" ]] && fatal "Theme $THEME_NAME not found"
	themes_order+=( "$THEME_NAME" )

	CONTINUE=1
	while [[ $CONTINUE -eq 1 ]]; do
		# get subthemes
		CONTINUE=0
		for theme_dir in "${THEME_DIRS_DICT[@]}"; do
			[[ "$theme_dir" == "NOTFOUND" ]] && continue

			theme_index="$theme_dir/index.theme"
			if grep -qoP "(?<=^Inherits=).+" "$theme_index"; then
				IFS=, read -ra subthemes <<< "$(grep -oP -m1 "(?<=^Inherits=).+" "$theme_index")"
				for theme_name in "${subthemes[@]}"; do
					if [[ "${THEME_DIRS_DICT[$theme_name]}" == "NOTFOUND" ]]; then
						continue
					elif [[ ! -d "${THEME_DIRS_DICT[$theme_name]}" ]]; then
						THEME_DIRS_DICT[$theme_name]=""
						CONTINUE=1
					fi
				done
			fi
		done

		# search theme dirs
		for theme_name in "${!THEME_DIRS_DICT[@]}"; do
			[[ -z "${THEME_DIRS_DICT[$theme_name]}" ]] || continue

			for icon_dir in "${icons_dirs[@]}"; do
				theme_dir="$icon_dir/$theme_name"
				if [[ -d "$theme_dir" && -f "$theme_dir/index.theme" ]]; then
					THEME_DIRS_DICT[$theme_name]="$theme_dir"
				fi
			done

			if [[ -d "${THEME_DIRS_DICT[$theme_name]}" ]]; then
				themes_order+=( "$theme_name" )
			else
				err "Theme $theme_name not found"
				THEME_DIRS_DICT[$theme_name]="NOTFOUND"
			fi
		done
	done

	verbose "Found themes ${themes_order[*]}"
	for theme_name in "${themes_order[@]}"; do
		THEME_DIRS+=( "${THEME_DIRS_DICT[$theme_name]}" )
	done
}

list_types() {
	local dir_type=''

	if [[ "${#types[@]}" -eq 0 ]]; then
		fatal "No type found in ${THEME_DIRS[*]}"
	fi

	if [ -t 1 ]; then
		cat <<- EOF
		List of available types:

		$(printf "\n%s" "${types[@]}" | column)
		EOF
	else
		printf "\n%s" "${types[@]}"	
	fi
}

change_icon () {
	local folder="$1"
	local type="$2"

	if [[ "$FORCE" == "0" ]]; then
		_is_valid_type "$type" || fatal "Unable to find '$type' type in ${THEME_DIRS[*]}"
	fi

	if [[ -d "$folder" ]]; then
		if [[ "$FORCE" == "1" ]]; then
			_type="$type"
		else
			_type="folder-${type}"
		fi
		gio set -t string "$folder" metadata::custom-icon-name "$_type"
	else
		fatal "'$folder' is not a path to a directory"
	fi
}

get_icon () {
	local folder="$1"

	if [[ -d "$folder" ]]; then
		gio info -a standard::name,standard::icon,metadata::custom-icon-name "$folder"
	else
		fatal "'$folder' is not a path to a directory"
	fi		
}

delete_icon () {
	local folder="$1"
		if [[ -d "$folder" ]]; then
			gio set -d "$folder" metadata::custom-icon-name 
		else
			fatal "'$folder' is not a path to a directory"
		fi
}

parse_args() {
	# Show help if no argument is passed
	if [ -z "$1" ]; then
		usage 2
	fi

	# parse kwargs
	while [ $# -gt 0 ]; do
		case "$1" in
			--dir*|-d*)
				if [[ "$1" != = ]]; then shift; fi
				FOLDER="${1#*=}"
				;;
			--type*|-t*)
				if [[ "$1" != = ]]; then shift; fi
				TYPE="${1#*=}"
				;;
			--help|-h)
				usage 0
				;;
			--version|-V)
				printf "%s %s\n" "$PROGNAME" "$PROGVERSION"
				exit 0
				;;
			--verbose)
				VERBOSE=1
				;;
			--force|-f)
				FORCE=1
				;;
			--list|-l)
				OPERATION="list"
				;;
			--del*)
				OPERATION="delete"
				;;
			-g|--get*)
				OPERATION="get"
				;;
			-*)
				echo "illegal option -- '$1'"
				usage 2
				;;
			*)
				args+=( "$1" )
				;;
		esac
		shift
	done

	# parse args
	for arg in "${args[@]}"; do
		if [[ -d "$arg" && -z "$FOLDER" ]]; then
			FOLDER="$arg"
		elif [[ -z "$TYPE" ]]; then
			TYPE="$arg"
		else
			FOLDER="$arg"
		fi
	done

	if [[ -z "$OPERATION" ]]; then
		OPERATION="change"
	fi
}

main() {
	local FOLDER TYPE OPERATION
	declare -a THEME_DIRS
	declare -a types

	declare -i VERBOSE="${VERBOSE:-0}"
	declare -i FORCE=0

	parse_args "${ARGS[@]}"

	if [[ "$VERBOSE" -eq "1" ]]; then
		# open a file descriptor for verbose messages
		exec 4>&1
		# close it before exiting
		trap 'exec 4>&-' EXIT HUP INT TERM
	fi

	get_theme_dirs
	get_types

	case "$OPERATION" in
		delete)
			delete_icon "$FOLDER"
			;;
		get)
			get_icon "$FOLDER"
			;;
		list)
			list_types
			;;
		change)
			change_icon "$FOLDER" "$TYPE"
			;;
	esac

	exit 0
}

main
